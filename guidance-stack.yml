AWSTemplateFormatVersion: 2010-09-09
Description: (SO9403) Guidance - External Connectivity to Amazon VPC Lattice
Transform: 'AWS::LanguageExtensions'

Parameters:
  AllowedIPv4Block:
    Description: IPv4 CIDR block for the allowed IP address range on the NLB
    Type: String
  AllowedIPv6Block:
    Description: IPv6 CIDR block for the allowed IP address range on the NLB
    Type: String
    Default: EMPTY
  VpcCidr:
    AllowedPattern: "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/(1[6-9]|2[0-8]))$"
    Default: 192.168.1.0/16
    Description: IPv4 CIDR block for the VPC
    Type: String
    ConstraintDescription: CIDR block parameter must be in the form x.x.x.x/y

Conditions:
  Ipv6Provided: !Not [!Equals [!Ref AllowedIPv6Block, EMPTY]]

Mappings:
  SubnetCIDR:
    Position: 
      PublicSubneta: 0
      PublicSubnetb: 1
      PublicSubnetc: 2
      PrivateSubneta: 3
      PrivateSubnetb: 4
      PrivateSubnetc: 5
      EndpointSubneta: 6
      EndpointSubnetb: 7
      EndpointSubnetc: 8
  Endpoint:
    Type:
      ECRDKR: ecr.dkr
      ECRAPI: ecr.api
      Logs: logs
      SSM: ssm
      SSMMessages: ssmmessages
      EC2Messages: ec2messages
  Protocol:
    Port:
      HTTP: 80
      HTTPS: 443

Resources:
  # ---------- AMAZON VPC RESOURCES ----------
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - vpc
              - !Ref AWS::StackName

  IPv6CidrBlock:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
        AmazonProvidedIpv6CidrBlock: true
        VpcId: !Ref VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # For::Each iteration: per subnet type (Public, Private, Endpoint) and AZ (3 AZs)
  # Resources to create: 9 subnets, 9 route tables, 9 route table associations - obtaining AZ affinity
  'Fn::ForEach::SubnetTypes':
    - SubnetType
    - [Public, Private, Endpoint]
    - '${SubnetType}':
      'Fn::ForEach::AZ':
        - AvailabilityZone
        - [a, b, c]
          # Subnets
        - '${SubnetType}Subnet${AvailabilityZone}':
            Type: AWS::EC2::Subnet
            Properties:
              VpcId: !Ref VPC
              AvailabilityZone: !Sub ${AWS::Region}${AvailabilityZone}
              CidrBlock: !Select [!FindInMap [SubnetCIDR, Position, 'Fn::Sub': '${SubnetType}Subnet${AvailabilityZone}'], !Cidr [!Ref VpcCidr, 9, 8 ]]
              Ipv6CidrBlock: !Select [!FindInMap [SubnetCIDR, Position, 'Fn::Sub': '${SubnetType}Subnet${AvailabilityZone}'], !Cidr [!Select [0, !GetAtt VPC.Ipv6CidrBlocks], 9, 64 ]]
              Tags:
                - Key: Name
                  Value: !Join
                    - '-'
                    - - !Sub subnet-${SubnetType}-AZ${AvailabilityZone}
                      - !Ref AWS::StackName
          # Route Tables
          '${SubnetType}RouteTable${AvailabilityZone}':
            Type: AWS::EC2::RouteTable
            Properties:
              VpcId: !Ref VPC
              Tags: 
                - Key: Name
                  Value: !Join
                    - '-'
                    - - !Sub rt-${SubnetType}-AZ${AvailabilityZone}
                      - !Ref AWS::StackName
          # Route Table associations
          '${SubnetType}RouteTableAssociation${AvailabilityZone}':
            Type: AWS::EC2::SubnetRouteTableAssociation
            Properties: 
              RouteTableId: !Ref
                'Fn::Sub': '${SubnetType}RouteTable${AvailabilityZone}'
              SubnetId: !Ref
                'Fn::Sub': '${SubnetType}Subnet${AvailabilityZone}'

  # For::Each iteration: per AZ (3 AZs)
  # VPC routes from public subnets to the Internet gateway
  'Fn::ForEach::VPCroutes':
    - AvailabilityZone
    - [a, b, c]
    - 'Ipv4Route${AvailabilityZone}':
        DependsOn:
          - InternetGatewayAttachment
        Type: AWS::EC2::Route
        Properties:
          DestinationCidrBlock: 0.0.0.0/0
          RouteTableId: !Ref
            'Fn::Sub': 'PublicRouteTable${AvailabilityZone}'
          GatewayId: !Ref InternetGateway
      'Ipv6Route${AvailabilityZone}':
        DependsOn:
          - InternetGatewayAttachment
        Type: AWS::EC2::Route
        Properties:
          DestinationIpv6CidrBlock: ::/0
          RouteTableId: !Ref
            'Fn::Sub': 'PublicRouteTable${AvailabilityZone}'
          GatewayId: !Ref InternetGateway

  # ---------- VPC ENDPOINTS ----------
  # For::Each iteration: per Endpoint Type
  # Interface endpoints
  'Fn::ForEach::VPCendpoints':
    - EndpointType
    - [ECRDKR, ECRAPI, Logs, SSM, SSMMessages, EC2Messages]
    - 'InterfaceEndpoint${EndpointType}':
        Type: AWS::EC2::VPCEndpoint
        Properties: 
          PrivateDnsEnabled: true
          SecurityGroupIds: 
            - !Ref EndpointSecurityGroup
          ServiceName: !Join
            - '.'
            - - com.amazonaws
              - !Sub ${AWS::Region}
              - !FindInMap [Endpoint, Type, 'Fn::Sub': '${EndpointType}']
          SubnetIds: 
            - !Ref EndpointSubneta
            - !Ref EndpointSubnetb
            - !Ref EndpointSubnetc
          VpcEndpointType: Interface
          VpcId: !Ref VPC

  S3GatewayEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties: 
      RouteTableIds: 
        - !Ref PrivateRouteTablea
        - !Ref PrivateRouteTableb
        - !Ref PrivateRouteTablec
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcEndpointType: Gateway
      VpcId: !Ref VPC

  # ---------- SECURITY GROUPS ----------
  # Network Load Balancer
  NginxNLBSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: NGINX NLB Security Group
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Sub nlb-sg
              - !Ref AWS::StackName

  # For::Each iteration: per port (HTTP, HTTPS)
  # IPv4 Ingress rules (NLB) & Egress ruless
  'Fn::ForEach::NginxNLBSecurityGroup':
    - Port
    - [HTTP, HTTPS]
    - 'NginxNLBSGIPv4Ingress${Port}':
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
          GroupId: !Ref NginxNLBSG
          CidrIp: !Ref AllowedIPv4Block
          IpProtocol: 'tcp'
          FromPort: !FindInMap [Protocol, Port, 'Fn::Sub': '${Port}']
          ToPort: !FindInMap [Protocol, Port, 'Fn::Sub': '${Port}']
      'NginxNLBSGEgress${Port}':
        Type: AWS::EC2::SecurityGroupEgress
        Properties:
          GroupId: !Ref NginxNLBSG
          DestinationSecurityGroupId: !Ref NginxECSSG
          IpProtocol: 'tcp'
          FromPort: !FindInMap [Protocol, Port, 'Fn::Sub': '${Port}']
          ToPort: !FindInMap [Protocol, Port, 'Fn::Sub': '${Port}']
  
  # IPv6 Ingress rules (NLB) - if provided
  'Fn::ForEach::IPv6NginxNLBSecurityGroup':
    - Port
    - [HTTP, HTTPS]
    - 'NginxNLBSGIPv6Ingress${Port}':
        Type: AWS::EC2::SecurityGroupIngress
        Condition: Ipv6Provided
        Properties:
          GroupId: !Ref NginxNLBSG
          CidrIpv6: !Ref AllowedIPv6Block
          IpProtocol: 'tcp'
          FromPort: !FindInMap [Protocol, Port, 'Fn::Sub': '${Port}']
          ToPort: !FindInMap [Protocol, Port, 'Fn::Sub': '${Port}']

  # ECS Cluster
  NginxECSSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: NGINX (ECS) Security group
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
          FromPort: -1
          ToPort: -1
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Sub nginx-sg
              - !Ref AWS::StackName
  
  # For::Each iteration: per port (HTTP, HTTPS)
  # Egress rules (ECS)
  'Fn::ForEach::NginxECSSecurityGroup':
    - Port
    - [HTTP, HTTPS]
    - 'NginxECSSGIngress${Port}':
        Type: AWS::EC2::SecurityGroupIngress
        Properties:
          GroupId: !Ref NginxECSSG
          SourceSecurityGroupId: !Ref NginxNLBSG
          IpProtocol: 'tcp'
          FromPort: !FindInMap [Protocol, Port, 'Fn::Sub': '${Port}']
          ToPort: !FindInMap [Protocol, Port, 'Fn::Sub': '${Port}']

  # VPC endpoints
  EndpointSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: VPC Endpoint Security Group
      SecurityGroupIngress:
        - CidrIp: !Ref VpcCidr
          IpProtocol: 'tcp'
          FromPort: 443
          ToPort: 443
          Description: Ingress rule for HTTPS
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'
          FromPort: -1
          ToPort: -1
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Sub endpoint-sg
              - !Ref AWS::StackName

  # ---------- NETWORK LOAD BALANCER ----------
  NginxNLB:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      IpAddressType: dualstack
      Scheme: internet-facing
      Type: network
      SecurityGroups: 
        - !Ref NginxNLBSG
      Subnets:
        - !Ref PublicSubneta
        - !Ref PublicSubnetb
        - !Ref PublicSubnetc

  # Target Group: 443
  NginxNLBTGroupHTTPS:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 3
      IpAddressType: ipv4
      Port: 443
      Protocol: TCP
      TargetGroupAttributes:
        - Key: proxy_protocol_v2.enabled
          Value: true
      TargetType: ip
      UnhealthyThresholdCount: 3
      VpcId: !Ref VPC

  # Listener: 443
  NginxNLBListenerHTTPS:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref NginxNLBTGroupHTTPS
          Type: forward
      LoadBalancerArn: !Ref NginxNLB
      Port: 443
      Protocol: TCP

  # Target Group: 80
  NginxNLBTGroupHTTP:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckIntervalSeconds: 5
      HealthCheckTimeoutSeconds: 2
      HealthyThresholdCount: 3
      IpAddressType: ipv4
      Port: 80
      Protocol: TCP
      TargetGroupAttributes:
        - Key: proxy_protocol_v2.enabled
          Value: true
      TargetType: ip
      UnhealthyThresholdCount: 3
      VpcId: !Ref VPC

  # Listener: 80
  NginxNLBListenerHTTP:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref NginxNLBTGroupHTTP
          Type: forward
      LoadBalancerArn: !Ref NginxNLB
      Port: 80
      Protocol: TCP

  # ---------- AMAZON ECR REPOSITORY ----------
  LatticeExternalConnectivityECRRepo:
    Type: AWS::ECR::Repository
    DeletionPolicy: Retain

  # ---------- ECS CLUSTER ----------
  NginxCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      CapacityProviders:
        - FARGATE
      ClusterSettings:
        - Name: containerInsights
          Value: enabled

  # ECS Task
  NginxTask:
    DependsOn:
      - DockerBuilderCustomResource
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      ExecutionRoleArn: !Ref NginxTaskExecRole
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${LatticeExternalConnectivityECRRepo}:latest"
          Name: Nginx
          PortMappings:
            - ContainerPort: 443
              Protocol: tcp
            - ContainerPort: 80
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref 'AWS::Region'
              awslogs-group: !Ref NginxLogGroup
              awslogs-stream-prefix: lattice-externalconnectivity
          Ulimits:
            - HardLimit: 1048576
              Name: nofile
              SoftLimit: 1048576
      Cpu: 2048
      Memory: 4096
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: ARM64
        OperatingSystemFamily: LINUX
      TaskRoleArn: !Ref NginxTaskRole

  # ECS Service
  NginxService:
    Type: 'AWS::ECS::Service'
    DependsOn:
      - NginxNLBListenerHTTPS
      - NginxNLBListenerHTTP
    Properties:
      Cluster: !Ref NginxCluster
      EnableExecuteCommand: true
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: Nginx
          ContainerPort: 443
          TargetGroupArn: !Ref NginxNLBTGroupHTTPS
        - ContainerName: Nginx
          ContainerPort: 80
          TargetGroupArn: !Ref NginxNLBTGroupHTTP
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
            - !Ref NginxECSSG
          Subnets:
            - !Ref PrivateSubneta
            - !Ref PrivateSubnetb
            - !Ref PrivateSubnetc
      SchedulingStrategy: REPLICA
      TaskDefinition: !Ref NginxTask

  # ECS Task Execution Role
  NginxTaskExecRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ecs-actions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'ssmmessages:CreateControlChannel'
                  - 'ssmmessages:CreateDataChannel'
                  - 'ssmmessages:OpenControlChannel'
                  - 'ssmmessages:OpenDataChannel'
                Resource: '*'

  # ECS Task Role
  NginxTaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ecs-actions
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ssmmessages:CreateControlChannel'
                  - 'ssmmessages:CreateDataChannel'
                  - 'ssmmessages:OpenControlChannel'
                  - 'ssmmessages:OpenDataChannel'
                Resource: '*'

  # CloudWatch Log Group
  NginxLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Sub '/${NginxCluster}'

  # AutoScaling - Scalable Target
  NginxScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties: 
      MaxCapacity: 9
      MinCapacity: 3
      ResourceId: !Join ['',['service/',!Ref NginxCluster,'/',!GetAtt NginxService.Name]]
      RoleARN: !Sub 'arn:aws:iam::${AWS::AccountId}:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService'
      ScalableDimension: 'ecs:service:DesiredCount'
      ServiceNamespace: 'ecs'
      
  # AutoScaling Policy
  NginxScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties: 
      PolicyName: !Join ['',['scaling-policy-',!GetAtt NginxService.Name]]
      PolicyType: 'TargetTrackingScaling'
      ResourceId: !Join ['',['service/',!Ref NginxCluster,'/',!GetAtt NginxService.Name]]
      ScalableDimension: 'ecs:service:DesiredCount'
      ScalingTargetId: !Ref NginxScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

  # ---------- CUSTOM RESOURCE: START CODEBUILD TO BUILD AND PUSH DOCKER IMAGE FROM PUBLIC REPO NGINX CODE ----------
  # IAM Role for CodeBuild
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildLogs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload
                  - ecr:PutImage
                Resource: !Sub 'arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${LatticeExternalConnectivityECRRepo}'
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource: '*'
        - PolicyName: IAMPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - iam:DeletePolicyVersion
                Resource: '*'

  # IAM Role for Lambda function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                Resource: !GetAtt DockerBuildProject.Arn
  
  # CodeBuild project to build and push Docker image
  DockerBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub '${AWS::StackName}-nginx-docker-build'
      Description: 'Build NGINX Docker image for VPC Lattice external connectivity guidance'
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: ARM_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/amazonlinux-aarch64-standard:3.0
        PrivilegedMode: true
        EnvironmentVariables:
          - Name: ECR_REPOSITORY
            Value: !Ref LatticeExternalConnectivityECRRepo
          - Name: AWS_REGION
            Value: !Ref 'AWS::Region'
          - Name: AWS_ACCOUNT_ID
            Value: !Ref 'AWS::AccountId'
      Source:
        Type: GITHUB
        #Location: https://github.com/aws-solutions-library-samples/guidance-for-external-connectivity-amazon-vpc-lattice.git
        Location: https://github.com/pablo19sc/guidance-for-external-connectivity-amazon-vpc-lattice.git
        BuildSpec: |
          version: 0.2
          phases:
            pre_build:
              commands:
                - echo Logging in to Amazon ECR...
                - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
                - cd Dockerfiles/nginx
            build:
              commands:
                - echo Building the Docker image...
                - docker build -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:latest .
            post_build:
              commands:
                - echo Pushing the Docker image...
                - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$ECR_REPOSITORY:latest
          artifacts:
            files:
              - imagedefinitions.json
      TimeoutInMinutes: 15

  # Lambda function to trigger CodeBuild
  DockerBuilderLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.13
      Timeout: 300
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import time
          import json
          import logging

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def handler(event, context):
              logger.info('Received event: %s', json.dumps(event))
              
              # Get the physical resource ID or generate a new one
              physical_id = event.get('PhysicalResourceId', None)
              if not physical_id:
                  physical_id = 'docker-builder-' + str(int(time.time()))
              
              # Skip processing for Delete events
              if event['RequestType'] == 'Delete':
                  logger.info('Delete request - no action needed')
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, physical_id)
                  return
              
              # Get properties from the event
              properties = event['ResourceProperties']
              project_name = properties.get('ProjectName')
              
              try:
                  # Initialize CodeBuild client
                  codebuild = boto3.client('codebuild')
                  
                  # Start the build
                  logger.info('Starting CodeBuild project: %s', project_name)
                  response = codebuild.start_build(projectName=project_name)
                  build_id = response['build']['id']
                  logger.info('Build started with ID: %s', build_id)
                  
                  # Wait for the build to complete
                  build_complete = False
                  build_status = None
                  
                  while not build_complete:
                      time.sleep(10)  # Check every 10 seconds
                      build_info = codebuild.batch_get_builds(ids=[build_id])
                      build_status = build_info['builds'][0]['buildStatus']
                      
                      if build_status != 'IN_PROGRESS':
                          build_complete = True
                  
                  logger.info('Build completed with status: %s', build_status)
                  
                  if build_status == 'SUCCEEDED':
                      # Build succeeded
                      response_data = {
                          'Status': 'SUCCESS',
                          'ImageUri': f"{properties.get('AccountId')}.dkr.ecr.{properties.get('Region')}.amazonaws.com/{properties.get('ECRRepositoryName')}:latest"
                      }
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, physical_id)
                  else:
                      # Build failed
                      response_data = {
                          'Status': 'FAILED',
                          'Reason': f"CodeBuild project {project_name} failed with status: {build_status}"
                      }
                      cfnresponse.send(event, context, cfnresponse.FAILED, response_data, physical_id)
              
              except Exception as e:
                  logger.error('Error: %s', str(e))
                  cfnresponse.send(event, context, cfnresponse.FAILED, {'Error': str(e)}, physical_id)

  # Custom resource to trigger the Docker build
  DockerBuilderCustomResource:
    Type: Custom::DockerBuilder
    Properties:
      ServiceToken: !GetAtt DockerBuilderLambda.Arn
      ProjectName: !Ref DockerBuildProject
      Version: '1.0.0' # Version/timestamp to force updates

Outputs:
  VpcId:
    Description: Ingress VPC ID
    Value: !Ref VPC
  NLBDomainName:
    Description: NLB Domain Name
    Value: !GetAtt NginxNLB.DNSName
  NLBHostedZoneId:
    Description: NLB Hosted Zone ID
    Value: !GetAtt NginxNLB.CanonicalHostedZoneID